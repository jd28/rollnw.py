name: ci

on:
  push:
    paths-ignore:
      - "**.md"
      - "**.rst"
      - "**.py"
      - ".readthedocs.yaml"
  pull_request:
    paths-ignore:
      - "**.md"
      - "**.rst"
      - "**.py"
      - ".readthedocs.yaml"
  release:
    types:
      - published

env:
  buildDir: "${{ github.workspace }}/build/"
  vcpkg-tag: "2023.01.09"
  VCPKG_ROOT: "${{ github.workspace }}/vcpkg/"
  VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/vcpkg/.cache"
  NWN_ROOT: "${{ github.workspace }}/nwn/"
  CI_GITHUB_ACTIONS: "1"
  MACOSX_DEPLOYMENT_TARGET: "10.15"
  CCACHE_DIR: "${{ github.workspace }}/ccache/"
  CCACHE_BASEDIR: "${{ github.workspace }}/ccache/"
  SCCACHE_DIR: "${{ github.workspace }}/ccache/"
  SCCACHE_BASEDIR: "${{ github.workspace }}/ccache/"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.os }}

    steps:
      - name: Get current date
        if: matrix.os != 'windows-2019'
        run: |
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Get current date
        if: matrix.os == 'windows-2019'
        run: |
          echo "DATE=$(Get-Date -Format yyyy-MM-dd)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - uses: actions/checkout@v3
        with:
          submodules: true

      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      # macOS Dependencies
      - name: macOS - install non-vcpkg dependencies
        if: matrix.os == 'macos-11'
        env:
          HOMEBREW_NO_ANALYTICS: "ON"
          HOMEBREW_NO_AUTO_UPDATE: "ON"
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
          HOMEBREW_NO_INSTALL_CLEANUP: "ON"
        run: |
          brew install pkg-config automake ninja libtool zlib llvm ccache
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
          echo "PATH=/usr/local/opt/ccache/libexec:$PATH" >> $GITHUB_ENV

      - name: macOS - check clang version
        if: matrix.os == 'macos-11'
        run: $CC --version

      # Windows dependencies
      - name: windows - install dependencies
        if: matrix.os == 'windows-2019'
        run: |
          choco install sccache ninja

      # vcpkg
      - name: all - download vcpkg
        if: matrix.os != 'ubuntu-20.04'
        run: |
          git clone https://github.com/microsoft/vcpkg ${{ github.workspace }}/vcpkg || true

      - name: all - cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/vcpkg/.cache
            ${{ github.workspace }}/ccache
          key: ${{ runner.os }}-build-${{ env.vcpkg-tag }}-${{ env.DATE }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: macOS|linux - bootstrap vcpkg
        if: matrix.os == 'macos-11'  && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          mkdir -p vcpkg/.cache
          vcpkg/bootstrap-vcpkg.sh

      - name: windows - bootstrap vcpkg
        if: matrix.os == 'windows-2019' && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run:  |
          md vcpkg/.cache -ea 0
          vcpkg/bootstrap-vcpkg.bat

      - uses: pypa/cibuildwheel@v2.11.4

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: vcpkg-logs
          path: ${{env.VCPKG_ROOT}}/buildtrees/**/*.log

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

      - name: cibuildwheel cache dir
        run:  |
          ls ${{ github.workspace }}/.cache/cibuildwheel || true


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build, build_sdist]
    runs-on: ubuntu-20.04
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.6.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
